on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  repository_dispatch:
    types: [build]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - run: pip install uv
      - run: uv pip install --system git+https://github.com/laminlabs/lamindb ipykernel scanpy
      - run: lamin init --storage ./test-schmid22 --modules bionty
      # setup the project: define types, features, and labels
      - run: python scripts/define_types_features_labels.py
      # process the 10x Chromium upload data
      - run: python scripts/curate_chromium_10x_upload.py --s3-folder s3://lamindata/fastq --experiment Schmidt22-EXP002 --biosample Schmidt22-S001 --project Schmidt22
      - run: python scripts/run_cellranger_count.py --experiment Schmidt22-EXP002 --biosample Schmidt22-S001 --project Schmidt22 --dry-run
      - run: python scripts/run_scrna_normalization_clustering.py --experiment Schmidt22-EXP002 --biosample Schmidt22-S001 --project Schmidt22 --dry-run
      # process the GWS CRISPR IFNg readout data in two notebooks
      - run: jupyter nbconvert --to notebook --inplace --execute notebooks/curate_gws_crispr_ifng_readout.ipynb
      - run: jupyter nbconvert --to notebook --inplace --execute notebooks/analyze_gws_crispr_ifng_readout.ipynb
      # analyze the joint data in a notebook
      - run: jupyter nbconvert --to notebook --inplace --execute notebooks/analyze_scrna_joined_on_ifng_readout.ipynb

  notify:
    if: always()
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: voxmedia/github-action-slack-notify-build@v1
        if: ${{ needs.test.result == 'success' && github.event_name == 'repository_dispatch' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_ACTION }}
        with:
          channel_id: C05FDBBFJ1F
          status: SUCCESS
          color: good
      - uses: voxmedia/github-action-slack-notify-build@v1
        if: ${{ needs.test.result == 'failure' && github.event_name == 'repository_dispatch' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_GITHUB_ACTION }}
        with:
          channel_id: C05FDBBFJ1F
          status: FAILURE
          color: danger
